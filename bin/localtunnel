#!/usr/bin/env ruby
require 'rubygems'
require 'net/ssh'
require 'net/ssh/gateway'
require 'net/http'
require 'uri'
require 'optparse'
require 'json'

require 'lib/gateway'

options = {}
op = OptionParser.new do |opts|
  opts.banner = "Usage: localtunnel [options] <localport>"
  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-k", "--key FILE", "upload a public key for authentication") do |k|
    options[:key] = k
  end
end
opts = op.parse!

local_port = opts[0]
key = File.exist?(options[:key].to_s) ? File.open(key_file).read : nil

def register_tunnel(key=nil)
  url = URI.parse("http://open.localtunnel.com/")
  if key
    return JSON.parse(Net::HTTP.post_form(url, {"key" => key}).body)
  else
    return JSON.parse(Net::HTTP.get(url))
  end
end

def start_tunnel(port, tunnel)
  gateway = Net::SSH::Gateway.new(tunnel['host'], tunnel['user'])
  gateway.open_remote(port.to_i, '127.0.0.1', tunnel['through_port'].to_i) do |a,b|
    puts tunnel['banner'] if tunnel.has_key? 'banner'
    puts "Local port #{port} is now accessible from http://#{tunnel['host']} ..."
    while true
      sleep 1
    end
  end
end

begin
  start_tunnel(local_port, register_tunnel(key))
rescue Net::SSH::AuthenticationFailed
  possible_key = Dir[File.expand_path('~/.ssh/*.pub')].first
  puts "Failed to authenticate. If this is your first tunnel, you need to"
  puts "upload a public key using the -k option. Try this:\n"
  puts "localtunnel -k #{possible_key ? possible_key : '~/path/to/key'} #{local_port}"
end

